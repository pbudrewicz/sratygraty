#!/bin/bash

### author: p.budrewicz

. $( dirname $0 )/user.key 
VERBOSE=0
QUIET=0
DRY=0
LIGHTS=""
SLEEP=0.7

RED_CORNER="0.6915 0.3083"
GREEN_CORNER="0.17 0.7"
BLUE_CORNER="0.1532 0.0475"

TEMP=$( getopt -o b:dhk:l:p:qv:: --long bridge:,dry,help,key:,light:,period:,quiet,verbose:: -n $0 -- "$@" )

if [ $? != 0 ] ; then echo "Cannot parse options. Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"

dump_data () {
    echo VERBOSE=$VERBOSE
    echo QUIET=$QUIET
    echo DRY=$DRY
    echo LIGHTS=$LIGHTS
    echo SLEEP=$SLEEP
}

discover_bridge () {
  gssdp-discover
}

unjson () {
    perl -MJSON -e '$s = decode_json(<STDIN>); eval "print \$s->'$1'";'
}

feedback () {
    if [ "$VERBOSE" -gt "0" ] ; then
        echo "$@ for light $light"
    fi
}

polite_curl () {
    if  [ "$VERBOSE" -gt "1" ] || [ "$DRY" = "1" -a "$QUIET" != "1" ]; then
        echo "running curl $@"
    fi
    if [ "$DRY" = "1" ] ; then
        return
    fi
    if [ "$QUIET" != "1" ]; then
        curl "$@"
    else
        curl "$@" >/dev/null 2>/dev/null
    fi
}

alert () { # uses $LIGHTS 
    
    for light in $LIGHTS; do
        set_light on 
        feedback alert 
        polite_curl -s -X PUT -d '{"alert":"select"}' http://$bridge_ip/api/$user_key/lights/$light/state 
    done
}

time_2_sec () {
    # calculate how many seconds is in 3:00m
    :    
}

transit_to_color () {
    # gently change current color into new one
    :
}

blink () { # uses $LIGHTS and $light
    HELPTEXT="
hue blink 
       until time
       for period
       once
       times number
    differrent time formats accepted
"
    cmd=$1
    shift
    case $cmd in
	[u]ntil) # until is a keyword and breaks emacs's and vim's formatting. LOL
	    if [ "$1" = "" ] ; then
		show_help 1
	    fi
	    feedback blinking until $1
	    UNTIL=$( date --date "$TIME" +%s)
	    ;;
	[f]or) # for is a keyword and breaks emacs's and vim's formatting. LOL
	    if [ "$1" = "" ] ; then
		show_help 1
	    fi
	    feedback blinking for $1 seconds
	    UNTIL=$(( $( date +%s ) + $1))
	    ;;
	once)
	    feedback blinking once
	    alert
	    exit 0
	    ;;
	times)
	    if [ "$1" = "" ] ; then
		show_help 1
	    fi
	    feedback blinking $1 times
	    for i in $(seq 1 $1) ; do
		alert ; sleep $SLEEP
	    done
	    exit 0
	    ;;
	*)
	    show_help 1
	    ;;
    esac
		

    for light in $LIGHTS ; do 	
      set_light on
    done
    sleep 1 # wait 4 reaction

    while [ $( date +%s )  -lt $UNTIL ] ; do        
        for light in $LIGHTS; do            
            if  is_light_on $light ; then 
                alert $light
            else
                exit 0
            fi            
        done
        sleep $SLEEP
    done

}


color_loop () { 

    effect=colorloop
    if [ "$1" = "off" ] ; then
        effect=none
        shift
    fi

    if [ "$1" = "" ] ; then
        echo "$0 [off] light_list"
        exit 0
    fi


    . $( dirname $0 )/user.key 


    for light; do
        polite_curl -s -X PUT -d '{"effect":"'$effect'"}' http://$bridge_ip/api/$user_key/lights/$light/state 
    done
}


fade () { 

HELPTEXT="
hue fade 
     until time
     for   period
"
    
    time_parameter=$1
    shift

    sleep=$time_parameter
    
    for light  in $LIGHTS ; do
	{
	    b=$(  get_brightness $light)
	    sleep=1 # TODO: it will be calculated depending on time_parameter  AND something 
	    while [ $b -gt 0 ] ; do
		set_brightness $b $light
		sleep $SLEEP
		b=$(( $b - 1 ))
	    done 
	    set_light off $light
	} &
    done
    wait

}

get_color () { # one light only

    L=$( get_lights_json $1 )
    color_type=$( echo $L | unjson '{state}{colormode}' )
    case $color_type in
	xy)
	    x=$( echo $L | unjson '{state}{xy}[0]' )
	    y=$( echo $L | unjson '{state}{xy}[1]' )
	    bri=$( echo $L | unjson '{state}{bri}' )
	    echo xy $x $y $bri
	    ;;
	hs)
	    hue=$( echo $L | unjson '{state}{hue}' )
	    sat=$( echo $L | unjson '{state}{sat}' )
	    bri=$( echo $L | unjson '{state}{bri}' )
	    echo hue $hue $bri $sat 
	    ;;
	ct)
	    ct=$( echo $L | unjson '{state}{ct}' )
	    bri=$( echo $L | unjson '{state}{bri}' )
	    echo ct $ct $bri
    esac
}

get_brightness () { 
    get_lights_json $1 | unjson '{state}{bri}'
}


get_config_json () { 
    curl -s -X GET  http://$bridge_ip/api/$user_key/config
}


get_lights_json () { 

    if [ "$1" != "" ] ; then
        for light ; do 
            curl -s -X GET  http://$bridge_ip/api/$user_key/lights/$light
        done
    else
        curl -s -X GET  http://$bridge_ip/api/$user_key/lights
    fi
    
}


get_on_off () { 
    get_lights_json $1 |perl -ne 'print "true" if m/"on"\s*:\s*true,/' 
}


is_light_on () { 

    if [ $(get_on_off $1) = true ] ; then
        return 0
    else
        return 1
    fi
}


set_light () { 

    HELPTEXT="
hue light on|off
"
   
    ONOFF=$1

    shift

    for light in $LIGHTS ; do

    case  $ONOFF in
        on)
            feedback setting light on
            polite_curl -s -X PUT -d '{"on":true}' http://$bridge_ip/api/$user_key/lights/$light/state ;;
        off)
            feedback setting light off
            polite_curl -s -X PUT -d '{"on":false}' http://$bridge_ip/api/$user_key/lights/$light/state ;;
        *)
            show_help 1
    esac

  done
}

my_loop () { 
    hue=0

    while true ; do
        ./set_color.sh $1 hue 100 $hue 200
        hue=$(( ( $hue + 10000 ) % 65535 ))
        sleep $SLEEP
    done
}


set_brightness () { 
    BRIGHTNESS=$1
    shift
    feedback setting brightness to $BRIGHTNESS    
    for light in $LIGHTS ; do
        polite_curl -s -X PUT -d '{"bri":'$BRIGHTNESS'}' http://$bridge_ip/api/$user_key/lights/$light/state 
    done
}

set_hue () {
    HELPTEXT="
hue set color hue {hue:0-65535} {brightness:1-254} {saturation:1-200}
   
"
    if [ "$3" = "" ] ; then
        show_help 1
    fi    
    feedback setting hue to $*
    polite_curl -s -X PUT -d '{"on":true, "hue":'$1', "sat":'$3',"bri":'$2'}' http://$bridge_ip/api/$user_key/lights/$light/state     
}

set_xy () {
    HELPTEXT="
hue set color xy {x} {y} {brightness:1-254}

"
    if [ "$3" = "" ] ; then
        show_help 1
    fi    
    feedback setting CIE color to $*
    polite_curl -s -X PUT -d '{"on":true, "xy":['$1', '$2'], "bri":'$3'}' http://$bridge_ip/api/$user_key/lights/$light/state 
}

set_ct () {
    HELPTEXT="
hue set color ct  {mirek:153-500} {brightness:1-254}
            153 - cold -- 500 - warm
"
    if [ "$2" = "" ] ; then
        show_help 1
    fi    

    feedback setting mirek to $*
    polite_curl -s -X PUT -d '{"on":true, "ct":'$1', "bri":'$2'}' http://$bridge_ip/api/$user_key/lights/$light/state 
}
    
set_color () { 

    HELPTEXT="
hue set color 
          hue {hue:0-65000} {brightness:1-254} {saturation:1-200}
          xy  {x} {y} {brightness:1-254}
          ct  {mirek:153-500} {brightness:1-254}
"
    schema=$1
    shift

    for light in $LIGHTS ; do
        case $schema in
	    xy)	
                set_xy $*
                ;;
            ct)
                set_ct $*
                ;;
            hue)
                set_hue $*
                ;;
            *)
                show_help 1 
                ;;            
        esac
    done
}


set_saturation () { 

    feedback setting saturation to $* 
    for light ; do
        polite_curl -s -X PUT -d '{"sat":'$v'}' http://$bridge_ip/api/$user_key/lights/$light/state 
    done
}


show_light_sequence () { 

    shift
    light=$1

    . $( dirname $0 )/user.key 

    while read x y b ; do 
        feedback = $x $y $b   
        polite_curl -s -X PUT -d '{"on":true, "xy":['$x', '$y'], "bri":'$b'}' http://$bridge_ip/api/$user_key/lights/$light/state 
        sleep $SLEEP
        if [ "$( $( dirname $0 )/get_on_off.sh $light )" = "false" ] ; then
            $( dirname $0 )/set_color.sh $light hue 254 45000 200
            $( dirname $0 )/lights_off.sh $light
            exit 0
        fi
    done 
}


sunrise () { 

    $(dirname $0)/lights_on.sh "$2"
    $(dirname $0)/show_light_sequence.sh $1 "$2" < $(dirname $0)/data/sunrise-96.dat
}


sunset () { 

    $(dirname $0)/lights_on.sh "$2"
    tac $( dirname $0 )/data/sunrise-120.dat |$(dirname $0)/show_light_sequence.sh $1 "$2" 
    $( dirname $0 )/lights_off.sh $2
}

set_value() {

    HELPTEXT="
hue set 
       brightness value - set brightness (1-254)
       saturation value - set saturation (1-200)
       color 
         hue {hue} {brightness} {saturation}
         xy  {x} {y} {brightness}
         ct  {mirek} {brightness}
      light
         on
         off
"
    cmd=$1
    shift
    case $cmd in
        brightness)
            set_brightness $*
            ;;
        saturation)
            set_saturation $*
            ;;
        color)            
            set_color $*
            ;;
        light)
            set_light $*
            ;;
        *)
            show_help 1
            ;;
    esac
}

get_value() {
    HELPTEXT="
hue get
        brightness - brightness of light
        onoff  - on/off status of light
        config - full bridge config JSON
        color  - get color description 
        lights - lights data in JSON format
        mode   - current color mode (hue/xy/ct)
"
    cmd=$1
    shift
    case $cmd in
        brightness)
	    get_brightness $LIGHTS
            ;;
        onoff)
            get_on_off $LIGHTS
	    ;;
        config)
            feedback getting config
	    get_config_json $*
            ;;
        lights)
	    get_lights_json $LIGHTS 
	    ;;
        color)
	    get_color $1
            ;;
        mode)
            ;;
        *)
            show_help 1
            ;;
    esac
}


HELPTEXT="
Usage: 
  hue [-b bridge_ip][-d][-h][-k user_key][[-l number] ... ][-p period][-q][[-v[level]] ... ] command
    Options are:
      -b|--bridge_ip -- IP address of the hue bridge device
      -d|--dry       -- dry run, do not bother the bridge
      -h|--help      -- this help
      -k|--key       -- user key for the bridge
      -l|--light     -- light to change (add -l for every light or list in quoted string)
      -p|--period    -- period for blinks in seconds (default ${SLEEP}s)
      -q|--quiet     -- quiet - hide http responses from the bridge
      -v|--verbose   -- give feedback on taken actions (more -v increases level)
    Commands are:
      alert - one blink please
      blink 
        until - start blinking until date/time
        for   - start blinking for some time
        once  - just blink once
        times - blink number of times
      clone   - set light as another light # TODO
      fade 
        until - fade away until date/time #TODO
        for   - fade away for some time #TODO
      get 
        config - fetch config from bridge in JSON
        lights - get lights status in JSON
        brightness - get light brightness value
        onoff - get on/of status of the light 
        color - get color description of the light 
      is
        on - return \"light is on\" status (0/1 - true/false) # TODO
      loop #TODO
        mode  - start color loop mode #TODO
        custom  - start custom color loop #TODO
      set 
        color      - set all color parameters
        brightness - set brightness 
        saturation - set saturation
        light 
          on       - turn on the light
          off      - turn off the light
      show    - show sequence #TODO
      sunset  - show sunset sequence #TODO
      sunrise - show sunrise sequence #TODO
      transit - gently transit to new color #TODO
"

mandatory_lights () {
    if [ "$LIGHTS" = "" ] ; then
        echo "Specifying light[s] is mandatory. Try $0 -h"
        exit 1
    fi
}

show_help () {
  echo "$HELPTEXT"
  exit $1
}

while true ; do
    case "$1" in
        -b|--bridge)
            bridge_ip="$2"; shift 2;;
        -d|--dry)
            DRY=1; shift ;;
        -h|--help)
            show_help 0 ;;
        -l|--light)
            LIGHTS="$LIGHTS $2"; shift 2;;
        -q|--quiet)
            QUIET=1;  shift ;;
	-p|--period)
	    SLEEP="$2"; shift 2;;
        -u|--user)
            user_key="$2"; shift 2;;
        -v|--verbose)
            case "$2" in
                "")
                    VERBOSE=$(( $VERBOSE + 1 ));;
                [0-9])
                    VERBOSE="$2" ;;
            esac
            shift 2;;
        --) 
            shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

mandatory_lights

cmd=$1
shift
case $cmd in
    alert)
        alert 
        ;;
    blink)
        blink $*
        ;;
    clone)
        set_value color $(get_color $1)
        ;;
    dump)
        dump_data
        exit 0
        ;;
    fade)
        fade $*
        ;;
    get)
        get_value $*
        ;;
    is)
        is_light_on $*
        ;;
    loop)
        ;;
    my_loop)
        ;;
    off)
        lights off $*
        ;;
    on)
        lights on $*
        ;;
    set)
        set_value $*
        ;;
    show_sequence)
        ;;
    sunrise)
        ;;
    sunset)
        ;;
    *)
        show_help 1
        ;;
esac
